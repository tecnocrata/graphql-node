type Building {
 _id: ID!
 name: String!
 code: String
 localization: String
 city: String
 properties: [Property]
}

enum PropertyType {
 Departament
 Parking
 Store
}

union GlobalSearch = Building | Property | Owner

type Property {
 _id: ID!
 code: String!
 type: PropertyType!
 floor: Int!
 area: String!
 building: Building!
}

interface Person {
 _id: ID!
 name: String!
 lastName: String!
 email: String
 celPhone: String!
 phone: String
}

type Owner implements Person {
 _id: ID!
 name: String!
 lastName: String!
 email: String
 celPhone: String!
 phone: String
 since: String
}

type Doorman implements Person {
 _id: ID!
 name: String!
 lastName: String!
 email: String
 celPhone: String!
 phone: String
 contractSince: String
}

type Query {
 "Devuelve todos los edificios"
 getBuildings: [Building]
 "Devuelve un solo edificio"
 getBuild(id: ID!): Building
 "Devuelve todas las propiedades"
 getAllProperties: [Property]
 "Devuelve las propiedades de un solo edificio"
 getPropertiesByBuilding(id: ID!): [Property]
 "Devuelve una sola propiedad"
 getProperty(id: ID!): Property
 "Devuelve todas las personas"
 getPeople: [Person]
 "Devuelve una sola persona"
 getPerson(id: ID!): Person
 "Devuelve una sola persona"
 searchItems(keyword: String!): [GlobalSearch]
}

input BuildingInput {
 name: String!
 code: String
 localization: String
 city: String
}

input BuildingEditInput {
 code: String
}

input PropertyInput {
 code: String!
 type: PropertyType!
 floor: Int!
 area: String!
 buildingId: ID #Int!
}

# Solo se puede editar el area, ningun otro campo
input PropertyEditInput {
 #code: String!
 #type: PropertyType!
 #floor: Int!
 area: String
 buildingId: ID
}

input PersonInput {
 name: String!
 lastName: String!
 email: String
 celPhone: String!
 phone: String
 since: String # For Owners!
 contractSince: String # For Doormen
}

type Mutation {
 "Crea un Edificio"
 createBuild(input: BuildingInput!): Building
 "Edita o Actualiza un edificio"
 updateBuilding(_id: ID!, input: BuildingEditInput!): Building
 "Crea una Propiedad"
 createProperty(input: PropertyInput!): Property
 "Edita o Actualiza una propiedad"
 updateProperty(_id: ID, input: PropertyEditInput!): Property
 "Agrega Propiedades a un Edificio"
 addProperty(propertyId: ID!, buildingId: ID!): Building
 "Crea una Persona"
 createPerson(input: PersonInput!): Person
}
